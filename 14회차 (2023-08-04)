일시 : 8/4(금), 점심시간
읽을 범위 : 30장 ~ 31장
준비 사항 : 읽을 범위내에서 인상 깊었거나 같이 이야기해보고 싶은 문장/단락 들을 1~2개 정도씩 준비하기

31장

저는 쭉 읽으면서 메소드 추출하기, 메소드 옮기기 많이 쓰는 편인 것 같음. 
대부분 아는 내용이었고, 단계로 표현 한부분들이 대부분 인텔리제이에서 제공한다고 느꼈음.

32장 -> 질문답 같은 느낌이었음.
308쪽에 단계 설명 하면서 리팩토링 도구 가 나왔는데, 모징? 싶었음

309장에서 테스트 할필요가 없는 것은 무엇인가? 라는 파트에서
두려움이 지루함으로 변할때 까지 테스트를 만들어라 라는 구문이 인상적이었음.

좋은테스트를 갖췄는지 여부를 어떻게 알수 있을까? 
셋업 중복 길지않고 실행시간이 길지않고 깨지기 쉬운 테스트

312 피드백이 얼마나 필요한가?
파트에 테스트를 얼마마 작성해야하나 내용이 궁금 했는데, 라는 말이 아래의 말을 통해 답변됐다고 생각됨
TDD테스트 의 관점은 실용적에 있고, 
TDD테스트는 어떤 목적에 대한 하나의 수단이다 
만약 어떤 구현에 대한 지식이 신뢰할만 하다면 그에대한 테스트는 작성하지 않을 것이다 라는 말이 인상 적이었다.

317페이지
ATDD의 문제는 어플리케이션 테스트를 작성하는데 협조노력이 필요하며 테스트와 피드백 사이가 길어서 별로 안 좋아하는 것 같다. 

318페이지 내용이 궁금해서 기대하면서봤는데
변경의 포인트가 많은 부분 부터 테스트를 짜고 테스트와 리팩토링 사이에 존재하는 교착상태를 풀어준다라는 걸로 되어있는데
-> 마지막 말의 교착상태를 풀어준다라는 말이 어떻게 생각 하시는지 궁금했음. 음 리팩토링을 할수있도록 해라? 요런말인가

어째서 tdd가 잘 작동하는가? 요게 기대하는 TDD로 기대하는 효과를 잘 드러낸것 같다.
